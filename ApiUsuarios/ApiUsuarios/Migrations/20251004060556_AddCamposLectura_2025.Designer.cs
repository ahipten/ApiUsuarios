// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiUsuarios.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251004060556_AddCamposLectura_2025")]
    partial class AddCamposLectura_2025
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Cultivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cultivos");
                });

            modelBuilder.Entity("Models.Lectura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CultivoId")
                        .HasColumnType("int");

                    b.Property<float>("DeficitHidrico")
                        .HasColumnType("real");

                    b.Property<string>("EtapaCultivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Evapotranspiracion")
                        .HasColumnType("real");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<double>("HumedadSuelo")
                        .HasColumnType("float");

                    b.Property<float>("IndiceEstres")
                        .HasColumnType("real");

                    b.Property<double>("IndiceSequia")
                        .HasColumnType("float");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<double>("MateriaOrganica")
                        .HasColumnType("float");

                    b.Property<string>("MetodoRiego")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("NecesitaRiego")
                        .HasColumnType("bit");

                    b.Property<double>("Precipitacion")
                        .HasColumnType("float");

                    b.Property<double>("RadiacionSolar")
                        .HasColumnType("float");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<double>("Temperatura")
                        .HasColumnType("float");

                    b.Property<double>("Viento")
                        .HasColumnType("float");

                    b.Property<double>("pH_Suelo")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CultivoId");

                    b.HasIndex("SensorId");

                    b.ToTable("Lecturas");
                });

            modelBuilder.Entity("Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Sensores");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Lectura", b =>
                {
                    b.HasOne("Models.Cultivo", "Cultivo")
                        .WithMany("Lecturas")
                        .HasForeignKey("CultivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Sensor", "Sensor")
                        .WithMany("Lecturas")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivo");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Models.Sensor", b =>
                {
                    b.HasOne("Models.User", "Usuario")
                        .WithMany("Sensores")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Models.Cultivo", b =>
                {
                    b.Navigation("Lecturas");
                });

            modelBuilder.Entity("Models.Sensor", b =>
                {
                    b.Navigation("Lecturas");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Sensores");
                });
#pragma warning restore 612, 618
        }
    }
}
